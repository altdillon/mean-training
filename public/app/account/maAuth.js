angular.module('app').factory('maAuth', function($http, maIdentity, maNotifier, maUser, $window, $q){	return {		authenticateUser: function(username, password) {			var dfd = $q.defer();			$http.post('/login', {username:username, password:password}).then(function (response) {				if (response.data.success) {					var user = new maUser();					angular.extend(user, response.data.user);					maIdentity.currentUser = user;					dfd.resolve(true);				} else {					dfd.resolve(false);				}			})	        return dfd.promise;		},		createUser: function(newUserData) {			var newUser = new maUser(newUserData);			var dfd = $q.defer();			newUser.$save().then(function() {				maIdentity.currentUser = newUser;				dfd.resolve();			}, function (response) {				dfd.reject(response.data.reason);			})			return dfd.promise;		},		updateCurrentUser: function(newUserData) {			var dfd = $q.defer();						var clone = angular.copy(maIdentity.currentUser);			angular.extend(clone, newUserData);						clone.$update().then(function() {				maIdentity.currentUser = clone;				dfd.resolve();			}, function(response) {				dfd.reject(response.data.reason);			});			return dfd.promise;		},		logoutUser: function() {			var dfd = $q.defer();			$http.post('/logout', {logout: true}).then(function () {				maIdentity.currentUser = undefined;				dfd.resolve();			})			return dfd.promise;		},		authorizeCurrentUserForRoute: function(role) {	        if(maIdentity.isAuthorized(role)) {    			return true;    		} else {    			return $q.reject('not authorized');    		}		},		authorizeAuthenticatedUserForRoute: function() {			if(maIdentity.isAuthenticated()) {				return true;			} else {				return $q.reject('not authorized')			}		},		authorizeFacebook: function() {			var dfd = $q.defer();			$http.get('/authorize/facebook').then(function(response) {				console.log('in callback');				if (response.data.success) {					var user = new maUser();					angular.extend(user, response.data.user);					maIdentity.currentUser = user;					dfd.resolve(true);				} else {					dfd.resolve(false);				}			});			return dfd.promise;		}	};})